import{_ as i,c as s,o as a,ae as t}from"./chunks/framework.BtEkjhVd.js";const u=JSON.parse('{"title":"API Reference","description":"","frontmatter":{},"headers":[],"relativePath":"api.md","filePath":"api.md"}'),n={name:"api.md"};function l(o,e,r,d,h,c){return a(),s("div",null,e[0]||(e[0]=[t(`<h1 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-label="Permalink to &quot;API Reference&quot;">​</a></h1><p>This page provides the API reference for <strong>Makio MeshLine</strong>.</p><h2 id="import" tabindex="-1">Import <a class="header-anchor" href="#import" aria-label="Permalink to &quot;Import&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { MeshLine, circlePositions, squarePositions } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;meshline&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><h3 id="meshline" tabindex="-1">MeshLine <a class="header-anchor" href="#meshline" aria-label="Permalink to &quot;MeshLine&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MeshLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  positions: Array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[number, number, number]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MeshLineOptions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A high-performance line mesh built on Three.js&#39;s NodeMaterial system.</p><h4 id="meshlineoptions" tabindex="-1">MeshLineOptions <a class="header-anchor" href="#meshlineoptions" aria-label="Permalink to &quot;MeshLineOptions&quot;">​</a></h4><ul><li><code>isClose</code> (boolean) — whether the line loop should be closed. Default: <code>false</code>.</li><li><code>color</code> (number) — hexadecimal line color. Default: <code>0xffffff</code>.</li><li><code>opacity</code> (number) — overall opacity of the line (0 to 1). Default: <code>1</code>.</li><li><code>alphaTest</code> (number) — alpha threshold for discarding fragments. Default: <code>1</code>.</li><li><code>lineWidth</code> (number) — width of the line in world units. Default: <code>0.3</code>.</li><li><code>sizeAttenuation</code> (boolean) — whether line width attenuates with perspective. Default: <code>false</code>.</li><li><code>gradientColor</code> (number | null) — hexadecimal color for a gradient effect along the line. Default: <code>null</code>.</li><li><code>map</code> (<code>THREE.Texture</code> | null) — texture to apply along the line. Default: <code>null</code>.</li><li><code>alphaMap</code> (<code>THREE.Texture</code> | null) — alpha mask texture for the line. Default: <code>null</code>.</li><li><code>mapOffset</code> (<code>THREE.Vector2</code> | null) — offset for the line texture coordinates. Default: <code>null</code>.</li><li><code>dashCount</code> (number | null) — number of dashes in the line. Default: <code>null</code>.</li><li><code>dashRatio</code> (number | null) — ratio of dash length to gap length. Default: <code>null</code>.</li><li><code>dashOffset</code> (number) — offset for the dash pattern. Default: <code>0</code>.</li><li><code>transparent</code> (boolean) — whether the material is transparent. Default: <code>false</code>.</li><li><code>wireframe</code> (boolean) — whether to render the line as wireframe. Default: <code>false</code>.</li><li><code>usePercent</code> (boolean) — whether to enable percent-based visibility uniforms. Default: <code>false</code>.</li><li><code>percent</code> (number) — initial start visibility percentage (0 to 1). Requires <code>percent2</code> or <code>usePercent</code>. Default: <code>undefined</code>.</li><li><code>percent2</code> (number) — initial end visibility percentage (0 to 1). Requires <code>percent</code> or <code>usePercent</code>. Default: <code>undefined</code>.</li></ul><p>You can use the <code>show()</code> and <code>hide()</code> methods on a <code>MeshLine</code> instance to animate these percent uniforms for dynamic reveal/hide effects.</p><h2 id="helper-functions" tabindex="-1">Helper Functions <a class="header-anchor" href="#helper-functions" aria-label="Permalink to &quot;Helper Functions&quot;">​</a></h2><h3 id="circlepositions" tabindex="-1">circlePositions <a class="header-anchor" href="#circlepositions" aria-label="Permalink to &quot;circlePositions&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">circlePositions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(segments</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number): Array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[number, number, number]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>Generates an array of <code>[x, y, z]</code> points evenly spaced around a circle.</p><h3 id="squarepositions" tabindex="-1">squarePositions <a class="header-anchor" href="#squarepositions" aria-label="Permalink to &quot;squarePositions&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">squarePositions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(segments</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number): Array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[number, number, number]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>Generates an array of <code>[x, y, z]</code> points outlining a square.</p><blockquote><p><em>You can find more details and full API on the GitHub repository.</em></p></blockquote>`,19)]))}const k=i(n,[["render",l]]);export{u as __pageData,k as default};
